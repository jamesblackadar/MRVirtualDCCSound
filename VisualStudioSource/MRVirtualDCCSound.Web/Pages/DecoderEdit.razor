@page "/decoderedit/{Id:int}"
<PageTitle>Manage Decoder</PageTitle>

@using MRVirtualDCCSound.Core
@inject RosterCollection roster
@inject NavigationManager navmgr
@inject GlobalSettings settings

<h1>Manage Decoder</h1>
@if (decoder == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @errormessage
    <EditForm Model="@decoder" OnValidSubmit="@Save">
        <CustomValidation @ref="customValidation" />
        <ValidationSummary />
        <table class="table">
            <thead>
                <tr>
                    <th>Address</th>
                    <th>Notes</th>
                    <th>Max RPM</th>
                    <th>SoundFolder</th>
                    <th>Control</th>
                </tr>
            </thead>
            <tbody>

                <tr>
                    <td><input type="text" @bind="@decoder.Id"></td>
                    <td><input type="text" @bind="@decoder.Notes"></td>
                    <td><input type="number" @bind="@decoder.MaxRPM"></td>
                    <td>
                        <InputSelect @bind-Value="@decoder.SoundsFolder">
                            @foreach (var fldr in settings.SoundsFolders)
                            {
                                <option value="@fldr">@fldr</option>
                            }
                        </InputSelect>
                    </td>
                    <td>
                        <button class="btn btn-primary" @onclick="Save">Submit</button>
                        <button class="btn btn-primary" @onclick="Cancel">Cancel</button>
                    </td>
                </tr>
            </tbody>
        </table>
    </EditForm>
}



@code {
    [Parameter]
    public int Id{ get; set; }

    private MobileSFXBase decoder;
    private string errormessage = "";
    private CustomValidation? customValidation;
    private MobileCollection<MobileSFXBase>? decoders;

    protected override async Task OnInitializedAsync()
    {
        decoder = roster[roster.GetIndexFor((uint)Id)];
    }

    protected void Save()
    {
        try
        {
            roster.Save();
            navmgr.NavigateTo("roster");
        }
        catch (Exception ex)
        {
            errormessage = ex.ToString();
            if (ex is InvalidOperationException)
            {
                roster.Remove(decoder);
            }
        }
    }
    void Cancel()
    {
        navmgr.NavigateTo("roster");
    }
}
